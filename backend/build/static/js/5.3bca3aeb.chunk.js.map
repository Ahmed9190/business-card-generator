{"version":3,"sources":["utils/toastify.js","components/custom-button/custom-button.jsx","components/custom-input/custom-input.jsx","components/signin/signin.jsx"],"names":["Toast","msg","type","autoClose","toast","position","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","CustomButton","text","color","hoverColor","props","className","style","backgroundColor","CustomInput","React","forwardRef","ref","Icon","activedIcon","onClickIcon","password","onClick","width","height","fill","Signin","useState","signinData","setSigninData","passwordRef","useRef","push","useHistory","useEffect","CheckPassword","test","length","current","setCustomValidity","onSubmit","e","preventDefault","axios","post","then","token","data","localStorage","setItem","window","location","href","catch","response","placeholder","onChange","target","value","name","required","minLength"],"mappings":"yIAAA,YAYeA,IAVD,SAACC,GAAD,IAAMC,EAAN,uDAAa,UAAWC,EAAxB,uDAAoC,KAApC,OACZC,IAAMF,GAAMD,EAAK,CACfI,SAAU,eACVF,UAAWA,EACXG,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,M,wECMCC,IAbM,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,WAAeC,EAA/B,oDACnB,gDACEC,UAAU,gBACVC,MAAO,CACLC,gBAAiBL,EACjB,UAAW,CAAEK,gBAAiBJ,KAE5BC,GANN,aAQGH,O,wGCTCO,EAAcC,IAAMC,YACxB,WAAyDC,GAAzD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAaC,EAAtB,EAAsBA,YAAaC,EAAnC,EAAmCA,SAAaX,EAAhD,sEACE,sBAAKC,UAAU,yBAAf,UACE,mCACEM,IAAKA,EACLN,UAAU,eACVf,KAAMyB,EAAW,WAAa,MAC1BX,IAELQ,GACC,cAACA,EAAD,CACEI,QAASF,EACTT,UAAU,aACVY,MAAM,OACNC,OAAO,OACPC,KAAMN,EAAc,UAAY,oBAO3BL,O,8JCiDAY,UAlEA,WAAO,IAAD,EACiBC,mBAAS,IAD1B,mBACZC,EADY,KACAC,EADA,KAEbC,EAAcC,mBACZC,EAASC,cAATD,KAERE,qBAAU,WACRC,MAEC,CAACP,IAEJ,IAAMO,EAAgB,WAAO,IAAD,IAG0B,GAF5B,0CACUC,KAAKR,EAAWP,YAChC,UAAAO,EAAWP,gBAAX,eAAqBgB,SAAU,EAC/C,UAAAP,EAAYQ,eAAZ,SAAqBC,kBACnB,kGAEG,UAAAT,EAAYQ,eAAZ,SAAqBC,kBAAkB,KAiBhD,OACE,uBAAMC,SAfiB,SAACC,GACxBA,EAAEC,iBACFC,IACGC,KAAK,UAAWhB,GAChBiB,MAAK,YAAsB,IAAbC,EAAY,EAAlBC,KACPC,aAAaC,QAAQ,MAAOH,MAE7BD,MAAK,WACJK,OAAOC,SAASC,KAAO,OAGxBC,OAAM,SAACZ,GAAD,OAAO/C,YAAM+C,EAAEa,SAASP,KAAM,aAILpC,UAAU,iBAA5C,UACE,cAAC,IAAD,CACE4C,YAAY,QACZC,SAAU,oBAAGC,OAAUC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,KAApB,OACR9B,EAAc,2BAAKD,GAAN,kBAAmB+B,EAAOD,MAEzC9D,KAAK,QACL+D,KAAK,QACLC,UAAQ,IAEV,cAAC,IAAD,CACE3C,IAAKa,EACLyB,YAAY,WACZM,UAAW,EACXL,SAAU,oBAAGC,OAAUC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,KAApB,OACR9B,EAAc,2BAAKD,GAAN,kBAAmB+B,EAAOD,MAEzCC,KAAK,WACLC,UAAQ,EACRvC,UAAQ,IAGV,sBAAMV,UAAU,cAAcW,QAAS,kBAAMU,EAAK,oBAAlD,4CAIA,cAAC,IAAD,CAAcpC,KAAK,SAASW,KAAK,iB","file":"static/js/5.3bca3aeb.chunk.js","sourcesContent":["import { toast } from \"react-toastify\";\r\n\r\nconst Toast = (msg, type = \"success\", autoClose = 2500) =>\r\n  toast[type](msg, {\r\n    position: \"bottom-right\",\r\n    autoClose: autoClose,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\nexport default Toast;\r\n","import React from \"react\";\r\nimport \"./custom-button.scss\";\r\n\r\nconst CustomButton = ({ text, color, hoverColor, ...props }) => (\r\n  <button\r\n    className=\"custom-button\"\r\n    style={{\r\n      backgroundColor: color,\r\n      \"&:hover\": { backgroundColor: hoverColor },\r\n    }}\r\n    {...props}\r\n  >\r\n    {text}\r\n  </button>\r\n);\r\n\r\nexport default CustomButton;\r\n","import \"./custom-input.scss\";\r\nimport React from \"react\";\r\n\r\nconst CustomInput = React.forwardRef(\r\n  ({ Icon, activedIcon, onClickIcon, password, ...props }, ref) => (\r\n    <div className=\"custom-input-container\">\r\n      <input\r\n        ref={ref}\r\n        className=\"custom-input\"\r\n        type={password ? \"password\" : null}\r\n        {...props}\r\n      />\r\n      {Icon && (\r\n        <Icon\r\n          onClick={onClickIcon}\r\n          className=\"input-icon\"\r\n          width=\"20px\"\r\n          height=\"20px\"\r\n          fill={activedIcon ? \"#102840\" : \"#1028407E\"}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n);\r\n\r\nexport default CustomInput;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./signin.scss\";\r\nimport CustomInput from \"../custom-input/custom-input\";\r\nimport CustomButton from \"../custom-button/custom-button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Toast from \"../../utils/toastify\";\r\n\r\nconst Signin = () => {\r\n  const [signinData, setSigninData] = useState({});\r\n  const passwordRef = useRef();\r\n  const { push } = useHistory();\r\n\r\n  useEffect(() => {\r\n    CheckPassword();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [signinData]);\r\n\r\n  const CheckPassword = () => {\r\n    const passwordPattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/;\r\n    const isMatched = passwordPattern.test(signinData.password);\r\n    if (!isMatched && signinData.password?.length >= 8) {\r\n      passwordRef.current?.setCustomValidity(\r\n        \"Your password must contains at least one numeric digit, one uppercase and one lowercase letter\"\r\n      );\r\n    } else passwordRef.current?.setCustomValidity(\"\");\r\n  };\r\n\r\n  const handleSubmitForm = (e) => {\r\n    e.preventDefault();\r\n    axios\r\n      .post(\"/signin\", signinData)\r\n      .then(({ data: token }) => {\r\n        localStorage.setItem(\"jwt\", token);\r\n      })\r\n      .then(() => {\r\n        window.location.href = \"/\";\r\n      })\r\n      // .then(() => push(\"/\"))\r\n      .catch((e) => Toast(e.response.data, \"error\"));\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmitForm} className=\"form-container\">\r\n      <CustomInput\r\n        placeholder=\"Email\"\r\n        onChange={({ target: { value, name } }) =>\r\n          setSigninData({ ...signinData, [name]: value })\r\n        }\r\n        type=\"email\"\r\n        name=\"email\"\r\n        required\r\n      />\r\n      <CustomInput\r\n        ref={passwordRef}\r\n        placeholder=\"Password\"\r\n        minLength={8}\r\n        onChange={({ target: { value, name } }) =>\r\n          setSigninData({ ...signinData, [name]: value })\r\n        }\r\n        name=\"password\"\r\n        required\r\n        password\r\n      />\r\n\r\n      <span className=\"change-form\" onClick={() => push(\"/account/signup\")}>\r\n        Don't have an account? Sign up\r\n      </span>\r\n\r\n      <CustomButton type=\"submit\" text=\"Sign in\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Signin;\r\n"],"sourceRoot":""}